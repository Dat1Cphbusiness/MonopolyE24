@startuml
class Main{
+ static void main(String[] args)
}



class Game{
 - String name
 - ArrayList<Player> players
 - ArrayList<String> listOfActions
 - Player currentPlayer
 - TextUI ui
 - FileIO io
 - String playerDataPath
 - static CardDeck cardDeck
 - Board board
 - Dice dice
 + Game(String name)
 - void setup()
 + void runDialog()
 - void createPlayer(String name, int balance)
  - void displayPlayers()
  ' new: we will load the data as strings and create player objects from the data in each element
  - loadPlayerData()
 ' new: in a turnbased game we would want to create as many players as the game allows
 - void registerPlayers()
 'new: we need a loop to manage each players' turn during the life cycle of the game
 - void runGameLoop();

}

class Player{
- String name
- Account account
- ArrayList<Field> deeds
+ Player(String name, int startAmount)
+ int updatePosition()
- boolean startPassed()
+ boolean buyProperty(Field f)
+ boolean payRent(int amount, Player recipient)
+ boolean pay(int amount)
+ void collect(int amount)
+ void recieve(int amount)
+ String toString()
+ String getName()
+ int getBalance()
}
class Account{
- int balance
+ void deposit(int amount)
+ boolean withdraw(int amount)
+ int getBalance()
}

class FileIO{
+ ArrayList<String> readPlayerData(String path)
+ void saveData(ArrayList<Player> players, String path)
+ String[] readBoardData(String path, int length).
}

class TextUI{
- Scanner scanner
+ void displayMsg(String s)
+ int promptNumeric(String msg)
+ String promptText(String msg)
+ int promptChoice(String msg, ArrayList<String> list)

}

class Field{
- String label
 - int ID
 - int cost
 - int income
 - String option
 + Field(ID, label, cost, income)
 + String toString()
 + String onLand(Player p)
 + String processResponse(Player p)
 # String onAccept(Player p)
 # String onReject(Player p)
}
class Board{
 - Field[] fields
 + Board(String [] fields, String [] cards])
 - void createFields(String [] data)
 + Field getField(int id)
}

class CardDeck {
- String[] carddata
- ArrayList<Card> cards
+ CardDeck
+ CardDeck(String[] carddata)
+ Card getNext()
}
class Card{
-String message
-int income
-int cost
-String event
+Card(String message, int income, int cost, String event)
}

class Dice{
 +boolean isDouble
 +int rollDiceSum()
 }

Game *-- TextUI
Main *-- Game
Game *-- Player
Game *-- FileIO
Player *-- Account
Game *-- Board
Board *-- Field
Game *-- CardDeck
CardDeck *-- Card
Game *-- Dice
Player *-- Card
Player *-- Field

@enduml